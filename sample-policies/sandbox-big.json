########### START DELETE HERE ###########
# This policy is comprehensive and does not permit service:*
# However this policy exceeds the 6144 character limit https: //docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html#reference_iam-limits-entity-length
# The workaround is to break this policy down into multiple policies and then attach them to the user.
# We could make use CloudFormation to create the policies and then attach them to the user. If you want to attach it to an existing user, create a group attach the policies and then the user to the group.
########### END DELETE HERE   ###########

{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "AllowAllActions",
            "Effect": "Allow",
            "Action": [
                "autoscaling:AttachInstances",
                "autoscaling:*AutoScalingGroup",
                "autoscaling:Describe*",
                "autoscaling:DetachInstances",
                "autoscaling:*Tags",
                "autoscaling:*Configuration",
                "autoscaling:*Hook",
                "autoscaling:*Lifecycle*",
                "autoscaling:*LoadBalancer*",
                "autoscaling:*Metrics*",
                "autoscaling:*Policy",
                "autoscaling:*Processes",
                "autoscaling:*Standby",
                "autoscaling:*Scheduled*",
                "autoscaling:SetInstanceHealth",
                "autoscaling:SetDesiredCapacity",
                "autoscaling:SetInstanceProtection",
                "cloud9:Describe*",
                "cloud9:Delete*",
                "cloud9:ListEnvironments",
                "cloud9:Validate*",
                "cloud9:*tag*",
                "cloud9:GetUserSettings",
                "cloudformation:List*",
                "cloudformation:Describe*",
                "cloudformation:Detect*",
                "cloudformation:EstimateTemplateCost",
                "cloudformation:Get*",
                "cloudtrail:GetTrailStatus",
                "cloudtrail:DescribeTrails",
                "cloudtrail:LookupEvents",
                "cloudtrail:ListTags",
                "cloudtrail:ListPublicKeys",
                "cloudtrail:GetEventSelectors",
                "cloudtrail:Put*",
                "cloudtrail:StartLogging",
                "cloudtrail:UpdateTrail",
                "cloudtrail:CreateTrail",
                "cloudwatch:Describe*",
                "cloudwatch:Get*",
                "cloudwatch:List*",
                "dynamodb:List*",
                "dynamodb:Delete*",
                "dynamodb:Restore*",
                "dynamodb:Update*",
                "dynamodb:Create*",
                "dynamodb:DescribeR*",
                "dynamodb:TagResource",
                "dynamodb:Get*",
                "dynamodb:Batch*",
                "dynamodb:ConditionCheckItem",
                "dynamodb:UntagResource",
                "dynamodb:PutItem",
                "dynamodb:Scan",
                "dynamodb:Query",
                "ec2:*Address*",
                "ec2:Cancel*",
                "ec2:Describe*",
                "ec2:*Gateway",
                "ec2:Get*",
                "ec2:*Image*",
                "ec2:*Network*",
                "ec2:*Route*",
                "ec2:*SecurityGroup*",
                "ec2:*Snapshot*",
                "ec2:*Subnet*",
                "ec2:*Vpc*",
                "ec2:*Vpn*",
                "ec2:DeleteFleets",
                "ec2:ResetEbsDefaultKmsKeyId",
                "ec2:ReportInstanceStatus",
                "ec2:ImportKeyPair",
                "ec2:StopInstances",
                "ec2:ProvisionByoipCidr",
                "ec2:WithdrawByoipCidr",
                "ec2:AssociateDhcpOptions",
                "ec2:ConfirmProductInstance",
                "ec2:ConfirmProductInstance",
                "ec2:ModifyFpgaImageAttribute",
                "ec2:EnableEbsEncryptionByDefault",
                "ec2:SendDiagnosticInterrupt",
                "ec2:AssociateIamInstanceProfile",
                "ec2:ReplaceIamInstanceProfileAssociation",
                "ec2:CreateDhcpOptions",
                "ec2:DeleteDhcpOptions",
                "ec2:CreateKeyPair",
                "ec2:DeleteKeyPair",
                "ec2:BundleInstance",
                "ec2:CreateTags",
                "ec2:DisassociateIamInstanceProfile",
                "ec2:AttachVolume",
                "ec2:CreateInstanceExportTask",
                "ec2:MonitorInstances",
                "ec2:UnmonitorInstances",
                "ec2:DetachVolume",
                "ec2:DeleteVolume",
                "ec2:DeleteLaunchTemplate*",
                "ec2:CreateFlowLogs",
                "ec2:DeleteFlowLogs",
                "ec2:ModifyIdentityIdFormat",
                "ec2:ModifyIdFormat",
                "ec2:AdvertiseByoipCidr",
                "ec2:DeprovisionByoipCidr",
                "ec2:DeleteTags",
                "ec2:TerminateInstances",
                "ec2:DisableEbsEncryptionByDefault",
                "ec2:ModifyEbsDefaultKmsKeyId",
                "ecr:Put*",
                "ecr:Start*",
                "ecr:List*",
                "ecr:*Upload*",
                "ecr:Batch*",
                "ecr:Delete*",
                "ecr:*Tag*",
                "ecr:Describe*",
                "ecr:Get*",
                "ecr:CreateRepository",
                "ecr:SetRepositoryPolicy",
                "ecs:List*",
                "ecs:Describe*",
                "ecs:*Tag*",
                "ecs:Put*",
                "ecs:Update*",
                "ecs:Start*",
                "ecs:*Register*",
                "ecs:Delete*",
                "ecs:Submit*",
                "ecs:*Poll*",
                "ecs:Create*",
                "ecs:*Task",
                "eks:Delete*",
                "eks:*Update*",
                "eks:List*",
                "eks:Describe*",
                "eks:*tag*",
                "eks:Create*",
                "elasticloadbalancing:AddListenerCertificates",
                "elasticloadbalancing:Modify*",
                "elasticloadbalancing:RegisterTargets",
                "elasticloadbalancing:Set*",
                "elasticloadbalancing:RemoveListenerCertificates",
                "elasticloadbalancing:*LoadBalancer",
                "elasticloadbalancing:Describe*",
                "elasticloadbalancing:CreateListener",
                "elasticloadbalancing:CreateRule",
                "elasticloadbalancing:DeleteRule",
                "elasticloadbalancing:*TargetGroup",
                "elasticloadbalancing:DeregisterTargets",
                "elasticloadbalancing:*Tags",
                "elasticloadbalancing:DeleteListener",
                "events:Describe*",
                "events:List*",
                "events:Put*",
                "events:TestEventPattern",
                "events:RemoveTargets",
                "glacier:Get*",
                "glacier:Describe*",
                "glacier:List*",
                "iam:List*",
                "iam:Get*",
                "iam:*tag*",
                "iam:Untag*",
                "iam:ChangePassword",
                "iam:CreateAccessKey",
                "iam:CreateLoginProfile",
                "iam:DeleteAccessKey",
                "iam:DeleteLoginProfile",
                "iam:UpdateAccessKey",
                "iot:*",
                "iotanalytics:*",
                "kinesis:*",
                "kinesisanalytics:*",
                "kinesisvideo:*",
                "kms:List*",
                "kms:Describe*",
                "lambda:Create*",
                "lambda:*Tag*",
                "lambda:List*",
                "lambda:Get*",
                "lambda:*Version*",
                "lambda:Invoke*",
                "lambda:*Function*",
                "lambda:EnableReplication",
                "lambda:*EventSourceMapping",
                "lambda:*Alias",
                "lambda:*Permission",
                "logs:List*",
                "logs:Describe*",
                "logs:Get*",
                "logs:StartQuery",
                "logs:StopQuery",
                "logs:TestMetricFilter",
                "logs:FilterLogEvents",
                "rds:Delete*",
                "rds:*ParameterGroup",
                "rds:Describe*",
                "rds:*DBSubnetGroup",
                "rds:DownloadDBLogFilePortion",
                "rds:AddRoleToDBCluster",
                "rds:*Snapshot",
                "rds:*SecurityGroup*",
                "rds:CreateEventSubscription",
                "rds:FailoverDBCluster",
                "rds:AddRoleToDBInstance",
                "rds:*Tags*",
                "rds:ModifyEventSubscription",
                "rds:ApplyPendingMaintenanceAction",
                "rds:BacktrackDBCluster",
                "rds:Remove*",
                "rds:*OptionGroup",
                "rds:AddSourceIdentifierToSubscription",
                "rds:CreateDBClusterEndpoint",
                "rds:StopDBCluster",
                "rds:PromoteReadReplica",
                "rds:StopActivityStream",
                "rds:StartActivityStream",
                "rds:RestoreDBClusterToPointInTime",
                "rds:StopDBInstance",
                "rds:DownloadCompleteDBLogFile",
                "rds:RestoreDBInstanceFromDBSnapshot",
                "rds:RestoreDBInstanceFromS3",
                "rds:RestoreDBInstanceToPointInTime",
                "rds:CreateDBCluster",
                "rds:StartDBCluster",
                "rds:ModifyDBCluster",
                "rds:CreateGlobalCluster",
                "rds:ModifyDBClusterEndpoint",
                "rds:ModifyGlobalCluster",
                "rds:RestoreDBClusterFromS3",
                "rds:RestoreDBClusterFromSnapshot",
                "rds:ModifyCurrentDBClusterCapacity",
                "rds:PromoteReadReplicaDBCluster",
                "resource-groups:Get*",
                "resource-groups:List*",
                "resource-groups:SearchResources",
                "resource-groups:*tag",
                "route53:List*",
                "route53:TestDNSAnswer",
                "route53:Get*",
                "route53:Create*",
                "route53:Update*",
                "route53:Delete*",
                "route53:DisassociateVPCFromHostedZone",
                "route53:Change*",
                "route53:AssociateVPCWithHostedZone",
                "s3:Put*",
                "s3:Get*",
                "s3:Create*",
                "s3:Replicate*",
                "s3:Delete*",
                "s3:*Bucket*",
                "s3:List*",
                "s3:*Job*",
                "s3:ReplicateTags",
                "s3:RestoreObject",
                "s3:AbortMultipartUpload",
                "sagemaker:*",
                "sns:*Tag*",
                "sns:*Topic*",
                "sns:*subscribe",
                "sns:Create*",
                "sns:*PhoneNumber*",
                "sns:List*",
                "sns:Set*",
                "sns:Publish",
                "sns:*PlatformApplication*",
                "sns:ConfirmSubscription",
                "sns:*Permission",
                "sns:Get*",
                "sns:DeleteEndpoint",
                "ssm:List*",
                "ssm:Describe*",
                "ssm:Get*",
                "ssm:PutInventory",
                "ssm:PutComplianceItems",
                "ssm:PutConfigurePackageResult",
                "ssm:UpdateAssociationStatus",
                "ssm:UpdateInstanceAssociationStatus",
                "ssm:UpdateInstanceInformation",
                "ssm:CancelCommand",
                "ssm:SendCommand",
                "ssm:StartAutomationExecution",
                "ssm:StartSession",
                "ssm:TerminateSession",
                "ssm:ResumeSession",
                "ssm:DescribeSessions",
                "ssm:GetConnectionStatus",
                "tag:Get*",
                "tag:UntagResources",
                "tag:TagResources"
            ],
            "Resource": "*"
        },
        {
            "Sid": "DenyAllActions",
            "Effect": "Deny",
            "Action": [
                "dynamodb:*Reserved*",
                "ec2:*Spot*",
                "ec2:*ReservedInstances*",
                "ec2:*Scheduled*",
                "ec2:*Purchase*",
                "ec2:EnableFastSnapshotRestores",
                "glacier:*VaultLock",
                "rds:PurchaseReservedDBInstancesOffering",
                "redshift:AcceptReservedNodeExchange",
                "redshift:PurchaseReservedNodeOffering",
                "route53domains:RegisterDomain",
                "s3:*ObjectLegalHold",
                "s3:*ObjectRetention",
                "s3:*BucketObjectLock*"
            ],
            "Resource": "*"
        },
        {
            "Sid": "RestrictInstanceActions",
            "Effect": "Allow",
            "Action": [
                "ec2:CreateVolume",
                "ec2:ModifyVolume",
                "ec2:ImportVolume",
                "ec2:ModifyVolumeAttribute",
                "ec2:ModifyFleet",
                "ec2:ImportSnapshot",
                "ec2:ResetInstanceAttribute",
                "ec2:CreateFleet",
                "ec2:CreateLaunchTemplateVersion",
                "ec2:EnableVolumeIO",
                "ec2:CreateLaunchTemplate",
                "ec2:ImportInstance",
                "ec2:ModifyInstanceCreditSpecification",
                "ec2:ModifyLaunchTemplate",
                "ec2:ModifyInstanceAttribute",
                "ec2:RebootInstances",
                "ec2:RunInstances",
                "ec2:StartInstances"
            ],
            "Resource": "*",
            "Condition": {
                "StringEqualsIfExists": {
                    "ec2:Owner": "amazon"
                },
                "ForAllValues:StringLikeIfExists": {
                    "ec2:InstanceType": [
                        "*.nano",
                        "*.micro",
                        "*.small"
                    ],
                    "ec2:Tenancy": "default"
                },
                "StringNotEqualsIfExists": {
                    "ec2:PlacementGroupStrategy": "cluster"
                },
                "StringNotEqualsIgnoreCaseIfExists": {
                    "ec2:VolumeType": [
                        "io1",
                        "st1"
                    ]
                },
                "NumericLessThanEqualsIfExists": {
                    "ec2:VolumeSize": "51"
                }
            }
        },
        {
            "Sid": "RestrictASLCInstanceType",
            "Effect": "Allow",
            "Action": "autoscaling:CreateLaunchConfiguration",
            "Resource": "*",
            "Condition": {
                "ForAnyValue:StringNotLikeIfExists": {
                    "autoscaling:InstanceType": [
                        "*.nano",
                        "*.micro",
                        "*.small"
                    ]
                }
            }
        },
        {
            "Sid": "RestrictASGInstanceTypeAndNo",
            "Effect": "Allow",
            "Action": [
                "autoscaling:UpdateAutoScalingGroup",
                "autoscaling:CreateAutoScalingGroup"
            ],
            "Resource": "*",
            "Condition": {
                "NumericGreaterThanIfExists": {
                    "autoscaling:MaxSize": "6"
                },
                "ForAnyValue:StringNotLikeIfExists": {
                    "autoscaling:InstanceTypes": [
                        "*.nano",
                        "*.micro",
                        "*.small"
                    ]
                }
            }
        },
        {
            "Sid": "RestrictRDSActivity",
            "Effect": "Allow",
            "Action": [
                  "rds:CreateDBInstance",
                  "rds:CreateDBInstanceReadReplica",
                  "rds:StartDBInstance",
                  "rds:ModifyDBInstance",
                  "rds:RebootDBInstance"
            ],
            "Resource": "*",
            "Condition": {
                "ForAnyValue:StringLikeIfExists": {
                    "rds:DatabaseEngine": [
                        "aurora",
                        "aurora-mysql",
                        "aurora-postgresql",
                        "mysql",
                        "postgres",
                        "mariadb"
                    ],
                    "rds:DatabaseClass": [
                        "*.nano",
                        "*.micro",
                        "*.small",
                        "*.medium"
                    ]
                },
                "NumericLessThanIfExists": {
                    "rds:StorageSize": "101"
                },
                "NumericEqualsIfExists": {
                    "rds:Piops": "0"
                },
                "BoolIfExists": {
                    "rds:MultiAz": [
                        false
                    ]
                }
            }
        },
        {
            "Sid": "RestrictCloud9",
            "Effect": "Allow",
            "Action": [
                "cloud9:UpdateEnvironment*",
                "cloud9:CreateEnvironment*"
            ],
            "Resource": "*",
            "Condition": {
                "ForAnyValue:StringLikeIfExists": {
                    "cloud9:InstanceType": [
                        "*.nano",
                        "*.micro",
                        "*.small"
                    ]
                }
            }
        },
        {
            "Sid": "RestrictSageMaker",
            "Effect": "Deny",
            "Action": [
                "sagemaker:CreateEndpoint",
                "sagemaker:StartMonitoringSchedule",
                "sagemaker:StartNotebookInstance",
                "sagemaker:CreateAutoMLJob",
                "sagemaker:CreateEndpointConfig",
                "sagemaker:CreateMonitoringSchedule",
                "sagemaker:UpdateMonitoringSchedule",
                "sagemaker:CreateDomain",
                "sagemaker:UpdateDomain",
                "sagemaker:CreateTrainingJob",
                "sagemaker:CreateProcessingJob",
                "sagemaker:CreateTransformJob",
                "sagemaker:CreateNotebookInstance",
                "sagemaker:UpdateNotebookInstance",
                "sagemaker:CreateApp"
            ],
            "Resource": "*",
            "Condition": {
                "ForAnyValue:StringNotLikeIfExists": {
                    "sagemaker:InstanceTypes": [
                        "*.medium",
                        "*.large",
                        "*.xlarge"
                    ]
                }
            }
        },
        {
            "Sid": "ServiceLinkedRoleAndPolicies",
            "Effect": "Allow",
            "Action": [
                "iam:UpdateAssumeRolePolicy",
                "iam:PassRole",
                "iam:DetachRolePolicy",
                "iam:CreateServiceLinkedRole",
                "iam:DeleteRolePolicy",
                "iam:UpdateRoleDescription",
                "iam:CreateRole",
                "iam:DeleteRole",
                "iam:AttachRolePolicy",
                "iam:DeleteServiceLinkedRole",
                "iam:PutRolePolicy",
                "iam:AddRoleToInstanceProfile",
                "iam:CreateInstanceProfile"
            ],
            "Resource": "*",
            "Condition": {
                "StringLikeIfExists": {
                    "iam:AWSServiceName": [
                        "elasticloadbalancing.amazonaws.com",
                        "autoscaling.amazonaws.com",
                        "rds.amazonaws.com",
                        "monitoring.rds.amazonaws.com",
                        "lambda.amazonaws.com",
                        "ec2.amazonaws.com",
                        "ecs.amazonaws.com",
                        "ecr.amazonaws.com",
                        "cloud9.amazonaws.com"
                    ]
                }
            }
        }
    ]
}
