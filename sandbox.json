## START DELETE HERE
# Sample AWS IAM policy providing a sandbox environment.
# Make sure to delete unwanted areas.
## END DELETE HERE
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "AllowAllActions",
            "Action": [
                "iam:List*",
                "iam:Get*",
                "iam:CreateServiceLinkedRole",
                "iam:PassRole",
                "ec2:*",
                "autoscaling:*",
                "rds:Describe*",
                "rds:List*",
                "rds:DownloadCompleteDBLogFile",
                "ssm:*",
                "cloudformation:*",
                "cloudwatch:*",
                "logs:*",
                "events:*",
                "resource-groups:*",
                "sns:*",
                "s3:*",
                "glacier:*",
                "elasticloadbalancing:*",
                "route53:*",
                "lambda:*",
                "logs:*",
                "cloudfront:*",
                "dynamodb:*"
            ],
            "Effect": "Allow",
            "Resource": "*"
        },
        {
            "Effect": "Deny",
            "Action": [
                "route53domains:RegisterDomain",
                "dynamodb:*Reserved*",
                "s3:*ObjectLegalHold",
                "s3:*ObjectRetention",
                "s3:*BucketObjectLock*",
                "glacier:*VaultLock"
            ],
            "Resource": "*"
        },
        {
            "Sid": "RestrictSpotandRI",
            "Action": [
                "ec2:*Spot*",
                "ec2:*ReservedInstances*",
                "ec2:*Scheduled*",
                "ec2:*Purchase*"
            ],
            "Effect": "Deny",
            "Resource": "*"
        },
        {
            "Effect": "Deny",
            "Action": "ec2:*Instance*",
            "Resource": "*",
            "Condition": {
                "StringEquals": {
                    "ec2:PlacementGroupStrategy": "cluster"
                }
            }
        },
        {
            "Effect": "Deny",
            "Action": "ec2:*Instance*",
            "Resource": "arn:aws:ec2:*:*:instance/*",
            "Condition": {
                "StringNotLike": {
                    "ec2:Tenancy": "default"
                }
            }
        },
        {
            "Sid": "RestrictInstanceTypes",
            "Action": [
                "ec2:RunInstances",
                "ec2:StartInstances"
            ],
            "Effect": "Deny",
            "Resource": "arn:aws:ec2:*:*:instance/*",
            "Condition": {
                "StringNotEquals": {
                    "ec2:InstanceType": [
                        "t2.nano",
                        "t2.micro",
                        "t2.small",
                        "t2.medium",
                        "t3.nano",
                        "t3.micro",
                        "t3.small",
                        "t3.medium"
                    ]
                }
            }
        },
        {
            "Sid": "RestrictNonAWSAMIs",
            "Action": "ec2:RunInstances",
            "Effect": "Deny",
            "Resource": [
                "arn:aws:ec2:*:*:image/*"
            ],
            "Condition": {
                "StringNotEqualsIgnoreCaseIfExists": {
                    "ec2:Owner": "amazon"
                }
            }
        },
        {
            "Sid": "RestrictLargeVolumes",
            "Action": [
                "ec2:RunInstances",
                "ec2:CreateVolume"
            ],
            "Effect": "Deny",
            "Resource": "arn:aws:ec2:*:*:volume/*",
            "Condition": {
                "NumericGreaterThanIfExists": {
                    "ec2:VolumeSize": "35"
                }
            }
        },
        {
            "Sid": "RestrictPIOPSVolumes",
            "Action": [
                "ec2:RunInstances",
                "ec2:CreateVolume"
            ],
            "Effect": "Deny",
            "Resource": "arn:aws:ec2:*:*:volume/*",
            "Condition": {
                "StringNotLikeIfExists": {
                    "ec2:VolumeType": [
                        "gp2"
                    ]
                }
            }
        },
        {
            "Sid": "RestrictASGLaunchConfiguration",
            "Action": [
                "autoscaling:CreateLaunchConfiguration"
            ],
            "Effect": "Deny",
            "Resource": "*",
            "Condition": {
                "StringNotEqualsIfExists": {
                    "autoscaling:InstanceType": [
                        "t2.nano",
                        "t2.micro",
                        "t2.small",
                        "t2.medium",
                        "t3.nano",
                        "t3.micro",
                        "t3.small",
                        "t3.medium"
                    ]
                }
            }
        },
        {
            "Sid": "RestrictRIPurchase",
            "Action": [
                "rds:PurchaseReservedDBInstancesOffering"
            ],
            "Effect": "Deny",
            "Resource": "*"
        },
        {
            "Sid": "RestrictRDSPiops",
            "Effect": "Deny",
            "Action": [
                "rds:StartDB*",
                "rds:Create*",
                "rds:Modify*",
                "rds:RestoreDB*",
                "rds:RebootDBInstance",
                "rds:CreateDBInstanceReadReplica",
                "rds:RestoreDBInstanceToPointInTime"
            ],
            "Resource": "*",
            "Condition": {
                "NumericNotEqualsIfExists": {
                    "rds:Piops": "0"
                }
            }
        },
        {
            "Sid": "RestrictRDSActivity",
            "Effect": "Allow",
            "Action": [
                "rds:*"
            ],
            "Resource": "*",
            "Condition": {
                "StringEqualsIfExists": {
                    "rds:DatabaseClass": [
                        "db.t2.micro",
                        "db.t2.small",
                        "db.t2.medium",
                        "db.t3.micro",
                        "db.t3.small",
                        "db.t3.medium"
                    ],
                    "rds:DatabaseEngine": [
                        "aurora-mysql",
                        "aurora-postgresql",
                        "mysql",
                        "postgres",
                        "mariadb"
                    ]
                },
                "NumericLessThanIfExists": {
                    "rds:StorageSize": "101"
                },
                "BoolIfExists": {
                    "rds:MultiAz": [
                        false
                    ]
                }
            }
        }
    ]
}